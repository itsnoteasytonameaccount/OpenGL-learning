#include "Camera.h"

const static glm::mat4 unit_matrix = glm::mat4(1.0f);

Camera::Camera(int width, int height, glm::vec3 position, float pitch, float yaw, float roll, float zoom, float moveSpeed, float sensitivity)
{
    this->position = position;
    this->pitch = pitch;
    this->yaw = yaw;
    this->roll = roll;
    this->zoom = zoom;
    this->moveSpeed = moveSpeed;
    this->sensitivity = sensitivity;
    isMoved = true;
    matrix = glm::mat4(1.0f);
    lastX = width / 2;
    lastY = height / 2;
}

Camera::~Camera()
{
}

void Camera::translate(glm::vec3 vector)
{
    position += vector;
}

void Camera::rollChange(float angle)
{
    roll += angle;
    if (roll > 360)
    {
        roll -= 360;
    }
}

void Camera::pitchChange(float angle)
{
    pitch += angle;
    if (pitch < 360)
    {
        pitch -= 360;
    }
}

void Camera::yawChange(float angle)
{
    yaw += angle;
    if (yaw < 360)
    {
        yaw -= 360;
    }
}

void Camera::processKeyboard(Camera_Movement direction, float deltaTime)
{
    float velocity = moveSpeed * deltaTime;
    isMoved = true;
    switch (direction)
    {
    case FORWARD:
        position.z -= velocity;
        break;
    case BACKWARD:
        position.z += velocity;
        break;
    case LEFT:
        position.x -= velocity;
        break;
    case RIGHT:
        position.x += velocity;
        break;
    default:
        break;
    }
}

void Camera::processMouseMovement(float xpos, float ypos, GLboolean constrainPitch)
{
    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;
    xoffset *= sensitivity;
    yoffset *= sensitivity;
    if (isMoved)
    {
        matrix = glm::translate(unit_matrix, -position) * matrix;
        position = glm::vec3(0.0f);
        isMoved = false;
    }
    matrix = glm::rotate(unit_matrix, glm::radians(abs(xoffset / 2) + abs(yoffset / 2)), glm::vec3(yoffset, -xoffset, 0)) * matrix;
}
glm::mat4 Camera::getViewMatrix()
{
    if (isMoved)
    {
        matrix = glm::translate(unit_matrix, -position) * matrix;
        position = glm::vec3(0.0f);
        isMoved = false;
    }
    return matrix;
}