#include "Square.h"

Square::Square(/* args */)
{
}

Square::~Square()
{
    glDeleteBuffers(id, &EBO);
}

void Square::createVao(float data[], unsigned int data2[], int length, int length2, int id, int location)
{
    glGenBuffers(id, &EBO);
    glGenBuffers(id, &vbo);
    glGenVertexArrays(id, &vao);
    glBindVertexArray(vao);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, length, data, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, length2, data2, GL_STATIC_DRAW);
    glVertexAttribPointer(location, 3, GL_FLOAT, GL_FALSE, 0, (void *)0);
    glEnableVertexAttribArray(location);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
    this->id = id;
}

void Square::draw()
{
    glClearColor(0.4, 0.5, 0.3, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // glUseProgram(program);
    glBindVertexArray(vao);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
}

int main()
{
    Square square;
    const char *const vsSource = "#version 330 core\n"
                                 "layout (location = 0) in vec3 point;\n"
                                 "void main()\n"
                                 "{\n"
                                 "   gl_Position = vec4(point, 1);\n"
                                 "}\n\0";
    // const char不能改内容，char * const不能改指向
    const char *const fsSource = "#version 330 core\n"
                                 "out vec4 color;\n"
                                 "void main()\n"
                                 "{\n"
                                 "   color = vec4(1, 0.4, 0.5, 1);\n"
                                 "}\n\0";
    float vertices[] = {
        0.5f, 0.5f, 0.0f,   // 右上角
        0.5f, -0.5f, 0.0f,  // 右下角
        -0.5f, -0.5f, 0.0f, // 左下角
        -0.5f, 0.5f, 0.0f   // 左上角
    };
    unsigned int indices[] = {
        // 注意索引从0开始!
        0, 1, 3, // 第一个三角形
        1, 2, 3  // 第二个三角形
    };
    square.initWindow(500, 500, "hello world");
    // square.linkProgram(fsSource, vsSource);
    square.createVao(vertices, indices, sizeof(vertices), sizeof(indices), 1, 0);
    square.mainLoop();
    return 0;
}